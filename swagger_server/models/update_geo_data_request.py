# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
import re  # noqa: F401,E501
from swagger_server import util


class UpdateGeoDataRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, vehicle_id: str=None, date_time: str=None, latitude: float=None, longitude: float=None, altimeter: float=None):  # noqa: E501
        """UpdateGeoDataRequest - a model defined in Swagger

        :param vehicle_id: The vehicle_id of this UpdateGeoDataRequest.  # noqa: E501
        :type vehicle_id: str
        :param date_time: The date_time of this UpdateGeoDataRequest.  # noqa: E501
        :type date_time: str
        :param latitude: The latitude of this UpdateGeoDataRequest.  # noqa: E501
        :type latitude: float
        :param longitude: The longitude of this UpdateGeoDataRequest.  # noqa: E501
        :type longitude: float
        :param altimeter: The altimeter of this UpdateGeoDataRequest.  # noqa: E501
        :type altimeter: float
        """
        self.swagger_types = {
            'vehicle_id': str,
            'date_time': str,
            'latitude': float,
            'longitude': float,
            'altimeter': float
        }

        self.attribute_map = {
            'vehicle_id': 'vehicle_id',
            'date_time': 'date_time',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'altimeter': 'altimeter'
        }
        self._vehicle_id = vehicle_id
        self._date_time = date_time
        self._latitude = latitude
        self._longitude = longitude
        self._altimeter = altimeter

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateGeoDataRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpdateGeoDataRequest of this UpdateGeoDataRequest.  # noqa: E501
        :rtype: UpdateGeoDataRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vehicle_id(self) -> str:
        """Gets the vehicle_id of this UpdateGeoDataRequest.


        :return: The vehicle_id of this UpdateGeoDataRequest.
        :rtype: str
        """
        return self._vehicle_id

    @vehicle_id.setter
    def vehicle_id(self, vehicle_id: str):
        """Sets the vehicle_id of this UpdateGeoDataRequest.


        :param vehicle_id: The vehicle_id of this UpdateGeoDataRequest.
        :type vehicle_id: str
        """
        if vehicle_id is None:
            raise ValueError("Invalid value for `vehicle_id`, must not be `None`")  # noqa: E501

        self._vehicle_id = vehicle_id

    @property
    def date_time(self) -> str:
        """Gets the date_time of this UpdateGeoDataRequest.

        Date and Time of Data  # noqa: E501

        :return: The date_time of this UpdateGeoDataRequest.
        :rtype: str
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time: str):
        """Sets the date_time of this UpdateGeoDataRequest.

        Date and Time of Data  # noqa: E501

        :param date_time: The date_time of this UpdateGeoDataRequest.
        :type date_time: str
        """
        if date_time is None:
            raise ValueError("Invalid value for `date_time`, must not be `None`")  # noqa: E501

        self._date_time = date_time

    @property
    def latitude(self) -> float:
        """Gets the latitude of this UpdateGeoDataRequest.

        Latitude of geolocated data  # noqa: E501

        :return: The latitude of this UpdateGeoDataRequest.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: float):
        """Sets the latitude of this UpdateGeoDataRequest.

        Latitude of geolocated data  # noqa: E501

        :param latitude: The latitude of this UpdateGeoDataRequest.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self) -> float:
        """Gets the longitude of this UpdateGeoDataRequest.

        Longitude of geolocated data  # noqa: E501

        :return: The longitude of this UpdateGeoDataRequest.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: float):
        """Sets the longitude of this UpdateGeoDataRequest.

        Longitude of geolocated data  # noqa: E501

        :param longitude: The longitude of this UpdateGeoDataRequest.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def altimeter(self) -> float:
        """Gets the altimeter of this UpdateGeoDataRequest.

        Value for altimeter of geolocated data  # noqa: E501

        :return: The altimeter of this UpdateGeoDataRequest.
        :rtype: float
        """
        return self._altimeter

    @altimeter.setter
    def altimeter(self, altimeter: float):
        """Sets the altimeter of this UpdateGeoDataRequest.

        Value for altimeter of geolocated data  # noqa: E501

        :param altimeter: The altimeter of this UpdateGeoDataRequest.
        :type altimeter: float
        """

        self._altimeter = altimeter
